{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app.component.ts","webpack:///src/app/app.module.ts","webpack:///src/app/question-form/question-form.component.ts","webpack:///src/app/question-form/question-form.component.html","webpack:///src/app/questions.service.ts","webpack:///src/app/questions/questions.component.ts","webpack:///src/app/questions/questions.component.html","webpack:///src/app/quiz.model.ts","webpack:///src/app/results/results.component.ts","webpack:///src/app/results/results.component.html","webpack:///src/app/welcome/welcome.component.ts","webpack:///src/app/welcome/welcome.component.html","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","AppComponent","selector","template","appRoutes","path","component","redirectTo","pathMatch","AppModule","forRoot","declarations","imports","providers","bootstrap","QuestionFormComponent","onChoiceMade","onChange","emit","form","value","choice","valueChanges","subscribe","templateUrl","styleUrls","QuestionsService","http","get","pipe","result","map","r","label","name","description","fileName","choices","providedIn","QuestionsComponent","route","questionsService","showResults","getQuestions","snapshot","params","quizId","questions","answers","currentQuestionIndex","values","length","quiz","undefined","Choice","correct","Question","Quiz","Answers","ResultsComponent","WelcomeComponent","getQuizzes","environment","production","bootstrapModule","err","console","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  template: '<router-outlet></router-outlet>'\n})\n\nexport class AppComponent { }","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { AppComponent } from './app.component';\nimport { QuestionFormComponent } from './question-form/question-form.component';\n\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ResultsComponent } from './results/results.component';\nimport { WelcomeComponent } from './welcome/welcome.component';\nimport { QuestionsComponent } from './questions/questions.component';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatButtonModule } from '@angular/material/button';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { MDBBootstrapModule } from 'angular-bootstrap-md';\n\nconst appRoutes: Routes = [\n  //defined a welcome route that'll point to a WelcomeComponent, will be used to display the list of quiz options to users\n  //This route will also be the resolution for the empty route, which means you’ll point to the welcome path by default\n  { path: 'welcome', component: WelcomeComponent },\n  { path: ':quizId', component: QuestionsComponent },\n  { path: '', redirectTo: \"welcome\", pathMatch: \"prefix\" },\n];\n\n\n\n//By passing HttpClientModule in the imports property of the object given to @NgModule, you’re telling Angular to make the HttpClientModule available.\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    QuestionFormComponent,\n    ResultsComponent,\n    WelcomeComponent,\n    QuestionsComponent\n  ],\n  imports: [\n    RouterModule.forRoot(appRoutes),\n    BrowserModule,\n    HttpClientModule,\n    ReactiveFormsModule,\n    MatCardModule,\n    BrowserAnimationsModule,\n    MatButtonModule,\n    NgbModule,\n    MDBBootstrapModule.forRoot(),\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { Question } from '../quiz.model';\n//@Component decorator to tell Angular that the class right below is a component\n@Component({\n  //wire up the class with its stylesheet and its template file\n  //selector property that defines the custom HTML element this component will render into. <app-question-form></app-question-form>\n  selector: 'app-question-form',\n  templateUrl: './question-form.component.html',\n  styleUrls: ['./question-form.component.scss']\n})\nexport class QuestionFormComponent implements OnInit {\n\n  @Input() question: Question;\n  //EventEmitter that accepts a generic type\n  //The generic type allows you to express what data the EventEmitter is going to carry\n  @Output() onChoiceMade = new EventEmitter<string>();\n\n  form: FormGroup;\n\n\n  //ngOnInit method is called once the component has received all its inputs (actually, all its data-bound properties) from the calling component \n  ngOnInit() {\n    // initialize a form controller, the programmatic entity that will link the model and the view\n    this.form = new FormGroup({\n      choice: new FormControl()\n    });\n\n    this.form.valueChanges.subscribe(this.onChange);\n  }\n\n  //dispatch the choice that's been made by the user.\n  onChange = () => {\n    this.onChoiceMade.emit(this.form.value.choice);\n  }\n}\n\n//defined an input (the question), an output (when a choice is made), and a form controller to ensure changes in the UI are propagated.","<!-- *ngIf=\"question\" directive only renders the element it applies to (in this case, the 'quiz' div) if the condition it's given evaluates to true. -->\n<!-- This ensures you won’t access the question if it's not defined; in such cases, the template will render as empty. -->\n<mdb-card class=\"form-card\" style=\"width: 36rem\">\n    <mdb-card-body class=\"quiz-body\" *ngIf=\"question\">\n        <!--contains an interpolation, which is a kind of one-way binding-->\n        <!--the question is rendered as follows-->\n        <mdb-card-title class=\"quiz-q\">\n            <h1>{{question.label}}</h1>\n        </mdb-card-title>\n        <form [formGroup]=\"form\">\n            <div class=\"custom-control custom-radio form-group\">\n                <!--ngFor is another directive-->\n                <!--It allows you to loop over a collection inside of the template. Here, you use it to render as many radio buttons as there are choices in the question.-->\n                <ul class=\"list-group list-group-flush\">\n                    <label *ngFor=\"let choice of question.choices\">\n                        <li class=\"list-group-item\">\n                            <input id=\"defaultUnchecked\" type=\"radio\" [value]=\"choice\" formControlName=\"choice\"\n                                mdbInput>\n                            &nbsp;{{choice.value}}&nbsp;\n                        </li>\n                    </label>\n                </ul>\n            </div>\n        </form>\n    </mdb-card-body>\n</mdb-card>\n\n<!-- In a nutshell, what you’re doing here is wiring up what you defined in the component’s file \n    (the TypeScript file) with some HTML, with the help of Angular's directives and binding syntax. -->","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\nimport { Quiz, Question } from './quiz.model';\nimport { Observable } from 'rxjs';\n\n// @Injectable decorator. A decorator is a function that augments a \n//piece of code — usually another function or a class. In this case, you’re using the \n//decorator to tell Angular that this service will be available everywhere (hence the root).\n@Injectable({\n  providedIn: 'root'\n})\nexport class QuestionsService {\n\n  //The class declaration looks like an ES6 class, but you’re within the realm of TypeScript. \n  //Look at the constructor. Its signature contains two oddities: a namespace (private) and a type. \n  //The namespace is a way of initializing the instance with whatever is given as a parameter. It's a shortcut for the following:\n\n  //constructor(http: HttpClient) {\n  //  this.http = http;\n  //}\n\n  //Expressing this dependency (to HttpClient) in the constructor tells Angular to inject an HttpClient into this class—its dependency injection again.\n  constructor(private http: HttpClient) { }\n\n  //load the list of quizzes\n  public getQuizzes() {\n    return this.http.get(`./assets/quiz-list.json`).pipe(\n      map((result: any[]) => {\n        //map the result to return an observable of quiz instances \n        return result.map(r => new Quiz(r.label, r.name, r.description, r.fileName));\n      })\n    );\n  }\n  //load questions for a specific quiz.\n  public getQuestions(fileName: string) {\n    return this.http.get(`./assets/${fileName}.json`).pipe(\n      map((result: any[]) => {\n        //map the result to return question instances\n        return result.map(r => new Question(r.label, r.choices));\n      })\n    );\n  }\n\n\n\n\n  // //the getJSON method takes a string argument that's the fileID to fetch. Using this.http, it fetches it and returns the result.\n  // public getJSON(fileId: string) {\n  //   //as Observable<any> is a TypeScript type cast. This is a way of giving the TypeScript compiler information it can deduce about types. \n  //   //It's supposed to make the method's return explicit by saying \"we return this type\". HttpClient returns an Observable (from the RxJS library you imported);\n  //   return this.http.get(`./assets/${fileId}.json`) as Observable<any>;\n  // }\n}","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n\nimport { switchMap } from 'rxjs/operators';\n\nimport { QuestionsService } from '../questions.service';\nimport { Quiz, Answers, Choice, Question } from '../quiz.model';\n\n@Component({\n  selector: 'app-questions',\n  templateUrl: './questions.component.html',\n  styleUrls: ['./questions.component.scss']\n})\nexport class QuestionsComponent implements OnInit {\n  answers: Answers;\n  questions: Question[];\n  quiz: Quiz;\n  currentQuestionIndex: number;\n\n  showResults = false;\n  // inject both the active route and the questions service\n  constructor(private route: ActivatedRoute, private questionsService: QuestionsService) { }\n\n  ngOnInit() {\n    //Once the data has been received, you initialize some properties on the instance\n    // read from the dynamic route and load the proper quiz data\n    this.questionsService.getQuestions(this.route.snapshot.params.quizId)\n      .subscribe(questions => {\n        //initialize everything\n        this.questions = questions;\n        this.answers = new Answers();\n        this.currentQuestionIndex = 0;\n      });\n  }\n  //updateChoice will be called each time the user selects an answer, and nextOrViewResults will be called each time the user clicks on the “Next” button).\n  updateChoice(choice: Choice) {\n    this.answers.values[this.currentQuestionIndex] = choice;\n  }\n\n  nextOrViewResults() {\n    if (this.currentQuestionIndex === this.questions.length - 1) {\n      this.showResults = true;\n      return;\n    }\n\n    this.currentQuestionIndex++;\n  }\n\n  reset() {\n    this.quiz = undefined;\n    this.questions = undefined;\n    this.answers = undefined;\n    this.currentQuestionIndex = undefined;\n  }\n}","<div *ngIf=\"quiz && !questions\" class=\"spinner-grow text-primary\"></div>\n<div>\n    <div class=\"quiz\" *ngIf=\"questions\" style=\"width: 24rem;\">\n\n        <div class=\"=questions\" *ngIf=\"!showResults\">\n            <app-question-form [question]=\"questions[currentQuestionIndex]\" (onChoiceMade)=\"updateChoice($event)\">\n            </app-question-form>\n\n            <button mdbBtn type=\"button\" color=\"light-blue\" mdbWavesEffect (click)=\"nextOrViewResults()\"\n                [disabled]=\"!answers.values[currentQuestionIndex]\">\n                {{currentQuestionIndex === questions.length - 1 ? 'View results' : 'Next'}}\n            </button>\n        </div>\n\n        <app-results *ngIf=\"showResults\" [answers]=\"answers\"></app-results>\n    </div>\n</div>","export class Choice {\n    constructor(public value: string, public correct?: boolean) { }\n}\n\nexport class Question {\n    constructor(public label: string, public choices: Choice[]) { }\n}\n\nexport class Quiz {\n    constructor(public label: string, public name: string, public description: string, public fileName: string) { }\n}\n\nexport class Answers {\n    constructor(public values: Choice[] = []) { }\n}\n\n//This file defines the structure of your application's model. The two main exposed classes are Quiz and Answers \n//(the other ones are classes within those two). The former is a representation of the data you load and the latter \n//represents the data your app will collect each time a user answers a question.\n\n//It's important to define this model early in the development process as it will help you define your components, \n//especially the form component you’re about to write. The form component will be a visual representation of a question \n//and its choices, so it’s important to have a clear idea of what the model looks like.","import { Component, Input } from '@angular/core';\nimport { Answers } from '../quiz.model';\n\n@Component({\n  selector: 'app-results',\n  templateUrl: './results.component.html',\n  styleUrls: ['./results.component.scss']\n})\nexport class ResultsComponent {\n  // import the answers from the quiz model and express the fact that the component takes answers as an input\n  @Input() answers: Answers;\n}\n","<mdb-card class=\"results\" style=\"width: 24rem;\">\n    <div class=\"view rgba-white-slight waves-light\" mdbWavesEffect>\n        <mdb-card-body class=\"results-body\">\n            <mdb-card-title class=\"results-title\">\n                <h1>Results</h1>\n            </mdb-card-title>\n\n            <!-- ngClass directive is used to set a correct class to an answer if its model is correct -->\n            <div class=\"answer\" *ngFor=\"let a of answers.values\" [ngClass]=\"{correct: a.correct}\">\n                {{a.value}}\n                <span>- {{a.correct}}</span>\n            </div>\n            <div class=\"result-button\">\n                <button mdbBtn type=\"button\" color=\"indigo\" mdbWavesEffect routerLink=\"/welcome\">Choose another\n                    quiz</button>\n            </div>\n        </mdb-card-body>\n    </div>\n</mdb-card>","import { Component, OnInit } from '@angular/core';\nimport { QuestionsService } from '../questions.service';\nimport { Quiz } from '../quiz.model';\n\n@Component({\n  selector: 'app-welcome',\n  templateUrl: './welcome.component.html',\n  styleUrls: ['./welcome.component.scss']\n})\nexport class WelcomeComponent implements OnInit {\n\n  quiz: Quiz[];\n  constructor(public questionsService: QuestionsService) { }\n\n  ngOnInit() {\n\n    this.questionsService.getQuizzes().subscribe(quiz => {\n      this.quiz = quiz\n    })\n  }\n\n  reset() {\n    this.quiz = undefined\n  }\n\n}\n","<mdb-card class=\"welcome\" style=\"width: 24rem;\">\n    <mdb-card-body class=\"welcome-body\">\n        <mdb-card-title>\n            <h1>Quizzes</h1>\n        </mdb-card-title>\n        <mdb-card-text *ngFor=\"let q of quiz\">\n            <button mdbBtn type=\"button\" color=\"indigo\" mdbWavesEffect routerLink=\"/{{q.name}}\"><span>{{q.label}}\n                    Quiz</span></button><br>\n\n            <span>{{q.description}}</span>\n        </mdb-card-text>\n    </mdb-card-body>\n</mdb-card>","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}