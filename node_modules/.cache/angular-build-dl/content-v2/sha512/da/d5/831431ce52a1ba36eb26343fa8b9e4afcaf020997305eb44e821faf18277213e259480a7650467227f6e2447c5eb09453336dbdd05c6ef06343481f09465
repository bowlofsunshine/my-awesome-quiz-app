{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./src/app/app.component.ts","./src/app/app.module.ts","./src/app/question-form/question-form.component.ts","./src/app/question-form/question-form.component.html","./src/app/questions.service.ts","./src/app/questions/questions.component.ts","./src/app/questions/questions.component.html","./src/app/quiz.model.ts","./src/app/results/results.component.ts","./src/app/results/results.component.html","./src/app/welcome/welcome.component.ts","./src/app/welcome/welcome.component.html","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":"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","file":"main-es2015.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  template: '<router-outlet></router-outlet>'\n})\n\nexport class AppComponent { }","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { AppComponent } from './app.component';\nimport { QuestionFormComponent } from './question-form/question-form.component';\n\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ResultsComponent } from './results/results.component';\nimport { WelcomeComponent } from './welcome/welcome.component';\nimport { QuestionsComponent } from './questions/questions.component';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatButtonModule } from '@angular/material/button';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { MDBBootstrapModule } from 'angular-bootstrap-md';\n\nconst appRoutes: Routes = [\n  //defined a welcome route that'll point to a WelcomeComponent, will be used to display the list of quiz options to users\n  //This route will also be the resolution for the empty route, which means you’ll point to the welcome path by default\n  { path: 'welcome', component: WelcomeComponent },\n  { path: ':quizId', component: QuestionsComponent },\n  { path: '', redirectTo: \"welcome\", pathMatch: \"prefix\" },\n];\n\n\n\n//By passing HttpClientModule in the imports property of the object given to @NgModule, you’re telling Angular to make the HttpClientModule available.\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    QuestionFormComponent,\n    ResultsComponent,\n    WelcomeComponent,\n    QuestionsComponent\n  ],\n  imports: [\n    RouterModule.forRoot(appRoutes),\n    BrowserModule,\n    HttpClientModule,\n    ReactiveFormsModule,\n    MatCardModule,\n    BrowserAnimationsModule,\n    MatButtonModule,\n    NgbModule,\n    MDBBootstrapModule.forRoot(),\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { Question } from '../quiz.model';\n//@Component decorator to tell Angular that the class right below is a component\n@Component({\n  //wire up the class with its stylesheet and its template file\n  //selector property that defines the custom HTML element this component will render into. <app-question-form></app-question-form>\n  selector: 'app-question-form',\n  templateUrl: './question-form.component.html',\n  styleUrls: ['./question-form.component.scss']\n})\nexport class QuestionFormComponent implements OnInit {\n\n  @Input() question: Question;\n  //EventEmitter that accepts a generic type\n  //The generic type allows you to express what data the EventEmitter is going to carry\n  @Output() onChoiceMade = new EventEmitter<string>();\n\n  form: FormGroup;\n\n\n  //ngOnInit method is called once the component has received all its inputs (actually, all its data-bound properties) from the calling component \n  ngOnInit() {\n    // initialize a form controller, the programmatic entity that will link the model and the view\n    this.form = new FormGroup({\n      choice: new FormControl()\n    });\n\n    this.form.valueChanges.subscribe(this.onChange);\n  }\n\n  //dispatch the choice that's been made by the user.\n  onChange = () => {\n    this.onChoiceMade.emit(this.form.value.choice);\n  }\n}\n\n//defined an input (the question), an output (when a choice is made), and a form controller to ensure changes in the UI are propagated.","<!-- *ngIf=\"question\" directive only renders the element it applies to (in this case, the 'quiz' div) if the condition it's given evaluates to true. -->\n<!-- This ensures you won’t access the question if it's not defined; in such cases, the template will render as empty. -->\n<mdb-card class=\"form-card\" style=\"width: 36rem\">\n    <mdb-card-body class=\"quiz-body\" *ngIf=\"question\">\n        <!--contains an interpolation, which is a kind of one-way binding-->\n        <!--the question is rendered as follows-->\n        <mdb-card-title class=\"quiz-q\">\n            <h1>{{question.label}}</h1>\n        </mdb-card-title>\n        <form [formGroup]=\"form\">\n            <div class=\"custom-control custom-radio form-group\">\n                <!--ngFor is another directive-->\n                <!--It allows you to loop over a collection inside of the template. Here, you use it to render as many radio buttons as there are choices in the question.-->\n                <ul class=\"list-group list-group-flush\">\n                    <label *ngFor=\"let choice of question.choices\">\n                        <li class=\"list-group-item\">\n                            <input id=\"defaultUnchecked\" type=\"radio\" [value]=\"choice\" formControlName=\"choice\"\n                                mdbInput>\n                            &nbsp;{{choice.value}}&nbsp;\n                        </li>\n                    </label>\n                </ul>\n            </div>\n        </form>\n    </mdb-card-body>\n</mdb-card>\n\n<!-- In a nutshell, what you’re doing here is wiring up what you defined in the component’s file \n    (the TypeScript file) with some HTML, with the help of Angular's directives and binding syntax. -->","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\nimport { Quiz, Question } from './quiz.model';\nimport { Observable } from 'rxjs';\n\n// @Injectable decorator. A decorator is a function that augments a \n//piece of code — usually another function or a class. In this case, you’re using the \n//decorator to tell Angular that this service will be available everywhere (hence the root).\n@Injectable({\n  providedIn: 'root'\n})\nexport class QuestionsService {\n\n  //The class declaration looks like an ES6 class, but you’re within the realm of TypeScript. \n  //Look at the constructor. Its signature contains two oddities: a namespace (private) and a type. \n  //The namespace is a way of initializing the instance with whatever is given as a parameter. It's a shortcut for the following:\n\n  //constructor(http: HttpClient) {\n  //  this.http = http;\n  //}\n\n  //Expressing this dependency (to HttpClient) in the constructor tells Angular to inject an HttpClient into this class—its dependency injection again.\n  constructor(private http: HttpClient) { }\n\n  //load the list of quizzes\n  public getQuizzes() {\n    return this.http.get(`./assets/quiz-list.json`).pipe(\n      map((result: any[]) => {\n        //map the result to return an observable of quiz instances \n        return result.map(r => new Quiz(r.label, r.name, r.description, r.fileName));\n      })\n    );\n  }\n  //load questions for a specific quiz.\n  public getQuestions(fileName: string) {\n    return this.http.get(`./assets/${fileName}.json`).pipe(\n      map((result: any[]) => {\n        //map the result to return question instances\n        return result.map(r => new Question(r.label, r.choices));\n      })\n    );\n  }\n\n\n\n\n  // //the getJSON method takes a string argument that's the fileID to fetch. Using this.http, it fetches it and returns the result.\n  // public getJSON(fileId: string) {\n  //   //as Observable<any> is a TypeScript type cast. This is a way of giving the TypeScript compiler information it can deduce about types. \n  //   //It's supposed to make the method's return explicit by saying \"we return this type\". HttpClient returns an Observable (from the RxJS library you imported);\n  //   return this.http.get(`./assets/${fileId}.json`) as Observable<any>;\n  // }\n}","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n\nimport { switchMap } from 'rxjs/operators';\n\nimport { QuestionsService } from '../questions.service';\nimport { Quiz, Answers, Choice, Question } from '../quiz.model';\n\n@Component({\n  selector: 'app-questions',\n  templateUrl: './questions.component.html',\n  styleUrls: ['./questions.component.scss']\n})\nexport class QuestionsComponent implements OnInit {\n  answers: Answers;\n  questions: Question[];\n  quiz: Quiz;\n  currentQuestionIndex: number;\n\n  showResults = false;\n  // inject both the active route and the questions service\n  constructor(private route: ActivatedRoute, private questionsService: QuestionsService) { }\n\n  ngOnInit() {\n    //Once the data has been received, you initialize some properties on the instance\n    // read from the dynamic route and load the proper quiz data\n    this.questionsService.getQuestions(this.route.snapshot.params.quizId)\n      .subscribe(questions => {\n        //initialize everything\n        this.questions = questions;\n        this.answers = new Answers();\n        this.currentQuestionIndex = 0;\n      });\n  }\n  //updateChoice will be called each time the user selects an answer, and nextOrViewResults will be called each time the user clicks on the “Next” button).\n  updateChoice(choice: Choice) {\n    this.answers.values[this.currentQuestionIndex] = choice;\n  }\n\n  nextOrViewResults() {\n    if (this.currentQuestionIndex === this.questions.length - 1) {\n      this.showResults = true;\n      return;\n    }\n\n    this.currentQuestionIndex++;\n  }\n\n  reset() {\n    this.quiz = undefined;\n    this.questions = undefined;\n    this.answers = undefined;\n    this.currentQuestionIndex = undefined;\n  }\n}","<div *ngIf=\"quiz && !questions\" class=\"spinner-grow text-primary\"></div>\n<div>\n    <div class=\"quiz\" *ngIf=\"questions\" style=\"width: 24rem;\">\n\n        <div class=\"=questions\" *ngIf=\"!showResults\">\n            <app-question-form [question]=\"questions[currentQuestionIndex]\" (onChoiceMade)=\"updateChoice($event)\">\n            </app-question-form>\n\n            <button mdbBtn type=\"button\" color=\"light-blue\" mdbWavesEffect (click)=\"nextOrViewResults()\"\n                [disabled]=\"!answers.values[currentQuestionIndex]\">\n                {{currentQuestionIndex === questions.length - 1 ? 'View results' : 'Next'}}\n            </button>\n        </div>\n\n        <app-results *ngIf=\"showResults\" [answers]=\"answers\"></app-results>\n    </div>\n</div>","export class Choice {\n    constructor(public value: string, public correct?: boolean) { }\n}\n\nexport class Question {\n    constructor(public label: string, public choices: Choice[]) { }\n}\n\nexport class Quiz {\n    constructor(public label: string, public name: string, public description: string, public fileName: string) { }\n}\n\nexport class Answers {\n    constructor(public values: Choice[] = []) { }\n}\n\n//This file defines the structure of your application's model. The two main exposed classes are Quiz and Answers \n//(the other ones are classes within those two). The former is a representation of the data you load and the latter \n//represents the data your app will collect each time a user answers a question.\n\n//It's important to define this model early in the development process as it will help you define your components, \n//especially the form component you’re about to write. The form component will be a visual representation of a question \n//and its choices, so it’s important to have a clear idea of what the model looks like.","import { Component, Input } from '@angular/core';\nimport { Answers } from '../quiz.model';\n\n@Component({\n  selector: 'app-results',\n  templateUrl: './results.component.html',\n  styleUrls: ['./results.component.scss']\n})\nexport class ResultsComponent {\n  // import the answers from the quiz model and express the fact that the component takes answers as an input\n  @Input() answers: Answers;\n}\n","<mdb-card class=\"results\" style=\"width: 24rem;\">\n    <div class=\"view rgba-white-slight waves-light\" mdbWavesEffect>\n        <mdb-card-body class=\"results-body\">\n            <mdb-card-title class=\"results-title\">\n                <h1>Results</h1>\n            </mdb-card-title>\n\n            <!-- ngClass directive is used to set a correct class to an answer if its model is correct -->\n            <div class=\"answer\" *ngFor=\"let a of answers.values\" [ngClass]=\"{correct: a.correct}\">\n                {{a.value}}\n                <span>- {{a.correct}}</span>\n            </div>\n            <div class=\"result-button\">\n                <button mdbBtn type=\"button\" color=\"indigo\" mdbWavesEffect routerLink=\"/welcome\">Choose another\n                    quiz</button>\n            </div>\n        </mdb-card-body>\n    </div>\n</mdb-card>","import { Component, OnInit } from '@angular/core';\nimport { QuestionsService } from '../questions.service';\nimport { Quiz } from '../quiz.model';\n\n@Component({\n  selector: 'app-welcome',\n  templateUrl: './welcome.component.html',\n  styleUrls: ['./welcome.component.scss']\n})\nexport class WelcomeComponent implements OnInit {\n\n  quiz: Quiz[];\n  constructor(public questionsService: QuestionsService) { }\n\n  ngOnInit() {\n\n    this.questionsService.getQuizzes().subscribe(quiz => {\n      this.quiz = quiz\n    })\n  }\n\n  reset() {\n    this.quiz = undefined\n  }\n\n}\n","<mdb-card class=\"welcome\" style=\"width: 24rem;\">\n    <mdb-card-body class=\"welcome-body\">\n        <mdb-card-title>\n            <h1>Quizzes</h1>\n        </mdb-card-title>\n        <mdb-card-text *ngFor=\"let q of quiz\">\n            <button mdbBtn type=\"button\" color=\"indigo\" mdbWavesEffect routerLink=\"/{{q.name}}\"><span>{{q.label}}\n                    Quiz</span></button><br>\n\n            <span>{{q.description}}</span>\n        </mdb-card-text>\n    </mdb-card-body>\n</mdb-card>","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":"webpack:///"}